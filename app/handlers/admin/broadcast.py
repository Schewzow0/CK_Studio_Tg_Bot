from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from app.states.admin_states import AdminStates
from app.config import DB_PATH
import aiosqlite

router = Router()


def get_cancel_broadcast_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_broadcast")]
        ]
    )


# –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: Message, state: FSMContext):
    await state.set_state(AdminStates.Broadcast.start_broadcast)
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_cancel_broadcast_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel_broadcast", AdminStates.Broadcast.start_broadcast)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
@router.message(AdminStates.Broadcast.start_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    await state.clear()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute("SELECT telegram_id FROM users")
        users = await cursor.fetchall()

    success = 0
    fail = 0

    for (user_id,) in users:
        try:
            if message.photo:
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=message.caption or '',
                )
            else:
                await message.bot.send_message(chat_id=user_id, text=message.text)
            success += 1
        except Exception:
            fail += 1

    await message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n\n‚ùå –û—à–∏–±–æ–∫: {fail}"
    )
