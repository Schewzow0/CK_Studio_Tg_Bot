from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.states.admin_states import AdminStates
from app.config import DB_PATH
from app.keyboards import admin_panel_kb, get_user_management_kb

import aiosqlite

router = Router()


# --- –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" ---
@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def in_manage_user_prompt(message: Message, state: FSMContext):
    await state.set_state(AdminStates.in_manage_user)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞):")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(AdminStates.in_manage_user, F.text.regexp(r"^\d+$"))
async def show_user_management_options(message: Message, state: FSMContext):
    user_id = int(message.text.strip())
    await state.update_data(target_user_id=user_id)

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute(
            "SELECT name, phone, is_blocked FROM users WHERE id = ?", (user_id,)
        )
        result = await cursor.fetchone()

    if not result:
        await state.clear()
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_panel_kb)
        return

    name, phone, is_blocked = result
    status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

    await message.answer(
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:* `{user_id}`\n"
        f"*–ò–º—è:* {name}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_kb(),
        parse_mode="Markdown"
    )


# --- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ---
@router.callback_query(F.data == "block_user", AdminStates.in_manage_user)
async def block_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["target_user_id"]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute("SELECT is_blocked FROM users WHERE id = ?", (user_id,))
        current_status = (await cursor.fetchone())[0]
        if current_status == 1:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            return

        await db.execute("UPDATE users SET is_blocked = 1 WHERE id = ?", (user_id,))

        await db.execute("DELETE FROM appointments WHERE user_id = ?", (user_id,))

        await db.commit()

    await state.clear()
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb)
    await callback.answer()


# --- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ---
@router.callback_query(F.data == "unblock_user", AdminStates.in_manage_user)
async def unblock_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["target_user_id"]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute("SELECT is_blocked FROM users WHERE id = ?", (user_id,))
        current_status = (await cursor.fetchone())[0]
        if current_status == 0:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
            return
        await db.execute("UPDATE users SET is_blocked = 0 WHERE id = ?", (user_id,))
        await db.commit()

    await state.clear()
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb)
    await callback.answer()


# --- –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@router.callback_query(F.data == "admin_back_to_menu", AdminStates.in_manage_user)
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=None)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb)
    await callback.answer()
