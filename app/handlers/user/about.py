import aiosqlite
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from app.keyboards import (
    about_inline_kb,
    inline_masters_for_users,
    master_info_kb,
    read_interview_kb,
    main_kb,
    main_admin_kb
)
from app.database import get_master_name
from app.config import ADMINS

from app.config import DB_PATH

router = Router()

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
QUESTIONS = [
    "–ö–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–≤–æ–∏–º –¥–µ–ª–æ–º? –ü–æ—á–µ–º—É —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
    "–ö–∞–∫ –∏ –≥–¥–µ —Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –æ–±—É—á–µ–Ω–∏–µ?",
    "–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±—è –∫–∞–∫ –º–∞—Å—Ç–µ—Ä–∞?"
]


@router.message(F.text == "–û –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=about_inline_kb(),
    )


@router.callback_query(F.data == "about_masters")
async def about_masters(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "üßë‚Äçüé® –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.",
        reply_markup=await inline_masters_for_users(add_back_button=True),
    )


@router.callback_query(F.data == "cancel_action_master_users")
async def back_to_masters(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=about_inline_kb(),
    )


@router.callback_query(F.data.startswith("master_for_users_"))
async def show_master_info_for_users(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    master_id = int(callback.data.split("_")[-1])

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute(
            "SELECT about, interview, photo FROM masters WHERE id = ?",
            (master_id,),
        )
        row = await cursor.fetchone()

    if not row:
        return await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    about_text, interview_text, photo_file_id = row
    name = await get_master_name(master_id)

    await callback.message.answer_photo(
        photo=photo_file_id,
        caption=f"*{name}*\n{about_text}",
        parse_mode="Markdown",
        reply_markup=await master_info_kb(master_id),
    )


@router.callback_query(F.data.startswith("read_interview_"))
async def read_interview(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    master_id = int(callback.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute(
            "SELECT interview FROM masters WHERE id = ?", (master_id,)
        )
        row = await cursor.fetchone()
    interview_text = row[0] if row else ""
    name = await get_master_name(master_id)

    answers = [line.strip() for line in interview_text.splitlines() if line.strip()]
    if len(answers) == len(QUESTIONS):
        interview_block = "\n\n".join(
            f"üåø *{QUESTIONS[i]}*\n{answers[i]}"
            for i in range(len(QUESTIONS))
        )
    else:
        interview_block = interview_text

    await callback.message.answer(
        f"*–ò–Ω—Ç–µ—Ä–≤—å—é —Å {name}:*\n\n{interview_block}",
        parse_mode="Markdown",
        reply_markup=await read_interview_kb(master_id),
    )


@router.callback_query(F.data == "about_studio")
async def about_studio(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    photo_file_id = "AgACAgIAAxkBAAIG52gQtciWgPuSZniQM4QyVvFH6JUHAAIw8jEb3GqISE4kC_yy__3oAQADAgADeAADNgQ"
    caption = (
        "*CK Studio*\n\n"
        "üìç *–ê–¥—Ä–µ—Å:* –≥\\. –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª\\. –ö–æ—Å–º–æ–Ω–∞–≤—Ç–∞ –õ–µ–æ–Ω–æ–≤–∞, 47\n"
        "‚è∞ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:* –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00\n"
        "üå∑ *–û—Ä–∏–µ–Ω—Ç–∏—Ä—ã:* —Ä–µ—Å—Ç–æ—Ä–∞–Ω ¬´–¢—Ä–µ—Å–∫–æ–≤–∏—è¬ª –∏ –º–∞–≥–∞–∑–∏–Ω ¬´Spar¬ª\n"
        "‚òéÔ∏è *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* \\+7 \\(928\\) 188\\-09\\-16, \\+7 \\(921\\) 269\\-51\\-57\n"
        "üöó *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:* –∞–≤—Ç–æ–±—É—Å—ã ‚Ññ 28, 31, 8, 36, –º–∞—Ä—à—Ä—É—Ç–∫–∞ ‚Ññ 88\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à—É —Å—Ç—É–¥–∏—é, –ø—Ä–æ–π–¥–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω ¬´Spar¬ª\\. –ú–µ–∂–¥—É –º–∞–≥–∞–∑–∏–Ω–æ–º –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º "
        "¬´–¢—Ä–µ—Å–∫–æ–≤–∏—è¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ ‚Äî –ø–æ–≤–µ—Ä–Ω–∏—Ç–µ —Ç—É–¥–∞ –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–¥–æ–ª—å –∑–¥–∞–Ω–∏—è\\. "
        "–£–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã —É–≤–∏–¥–∏—Ç–µ —É—é—Ç–Ω—ã–π –≤—Ö–æ–¥ –≤ *CK Studio*\\."
    )
    await callback.message.answer_photo(
        photo=photo_file_id,
        caption=caption,
        parse_mode="MarkdownV2",
        reply_markup=about_inline_kb(),
    )


@router.callback_query(F.data == "about_achievements")
async def about_achievements(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    text = (
        "–ù–∞—à–∞ —Å—Ç—É–¥–∏—è *CK Studio* –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ 2017 –≥–æ–¥—É, –∏ –≤–æ—Ç —É–∂–µ –±–æ–ª—å—à–µ 8 –ª–µ—Ç –º—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å "
        "—Å –ª—é–±–æ–≤—å—é —Å–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–æ—Ç—É –¥–ª—è –≤–∞—Å\\. \n\n"
        "–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –º—ã —Å—Ç–∞–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –º–∞—Å—Ç–µ—Ä–æ–≤, –∞ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–µ–º—å—ë–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –æ–¥–Ω–æ–π "
        "—Ü–µ–ª—å—é ‚Äî –¥–µ–ª–∞—Ç—å –ª—é–¥–µ–π —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ\\! \n\n"
        "–ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–µ–º, —á—Ç–æ –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ—á–∞–ª–∏—Å—å –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Ñ–µ—Å—Ç–∏–≤–∞–ª—è—Ö –∫—Ä–∞—Å–æ—Ç—ã –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö\\. "
        "–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö –ø–æ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–º—É "
        "–∏—Å–∫—É—Å—Å—Ç–≤—É –∏ –º–∞–∫–∏—è–∂—É, –≥–¥–µ –Ω–µ —Ä–∞–∑ –ø–æ–¥–Ω–∏–º–∞–ª–∏—Å—å –Ω–∞ –ø—å–µ–¥–µ—Å—Ç–∞–ª\\.\n\n"
        "*–í 2021 –≥–æ–¥—É* –Ω–∞—à–∞ —Å—Ç—É–¥–∏—è –≤–æ—à–ª–∞ –≤ *–¢–û–ü\\-10 –ª—É—á—à–∏—Ö —Å–∞–ª–æ–Ω–æ–≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞* –ø–æ –≤–µ—Ä—Å–∏–∏ "
        "*Beauty Kaliningrad Awards*, –∞ –≤ *2023* –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–∏–ø–ª–æ–º—ã –∑–∞ —Å–∞–º—ã–µ "
        "—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É—Ö–æ–¥–∞ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏\\.\n\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, *CK Studio* –±—ã–ª–∞ —É–¥–æ—Å—Ç–æ–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã *¬´–õ—É—á—à–∞—è —Å—Ç—É–¥–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π "
        "–æ–∫—Ä–∞—Å–∫–∏¬ª* –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ *Color Art Fest 2022*, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–µ–º–∏—é *Beauty Star "
        "Kaliningrad* –∑–∞ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –∏ –∑–∞–±–æ—Ç—É –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö\\.\n\n"
        "–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏–º—Å—è, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º—Å—è –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏, –ø–æ—Å–µ—â–∞–µ–º –º–∞—Å—Ç–µ—Ä\\-–∫–ª–∞—Å—Å—ã, —Å–µ–º–∏–Ω–∞—Ä—ã –∏ "
        "–æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ —Å –º–∏—Ä–æ–≤—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏\\.\n\n"
        "–ù–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –Ω–∞—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ª—é–¥–∏\\. –í–∞—à–∏ —É–ª—ã–±–∫–∏, –≤–∞—à–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã, –≤–∞—à–∞ "
        "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å\\. –ò–º–µ–Ω–Ω–æ —Ä–∞–¥–∏ —ç—Ç–æ–≥–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º, —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\\. "
        "*–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å\\!*"
    )

    await callback.message.answer(
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=about_inline_kb(),
    )


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    if callback.from_user.id in ADMINS:
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_admin_kb)
