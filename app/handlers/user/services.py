from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.states import BookingStates
from app.keyboards import (
    inline_services,
    inline_masters_by_service,
    inline_master_services_by_category,
    format_duration,
    service_description_kb,
    inline_user_calendar,
    main_kb,
    months_ru,
    inline_time_selector
)
from app.database import get_service_name, get_master_name


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from app.config import DB_PATH
import aiosqlite
from datetime import datetime

router = Router()


# –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@router.message(F.text == "–£—Å–ª—É–≥–∏")
async def services(message: Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute("SELECT is_blocked FROM users WHERE telegram_id = ?", (message.from_user.id,))
        row = await cursor.fetchone()

    if row and row[0] == 1:
        await message.answer("üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
        return

    await state.set_state(BookingStates.choosing_category)
    keyboard = await inline_services()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("service_"), BookingStates.choosing_category)
async def service_selected(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[1])
    await state.update_data(service_id=service_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    service_name = await get_service_name(service_id)

    await state.set_state(BookingStates.choosing_master)
    keyboard = await inline_masters_by_service(service_id, add_back_button=True)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {service_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "back_to_services", BookingStates.choosing_master)
async def back_to_services(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingStates.choosing_category)
    keyboard = await inline_services()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
@router.callback_query(F.data.startswith("master_"), BookingStates.choosing_master)
async def master_selected(callback: CallbackQuery, state: FSMContext):
    master_id = int(callback.data.split("_")[1])
    state_data = await state.get_data()
    service_id = state_data['service_id']

    await state.update_data(master_id=master_id)
    await state.set_state(BookingStates.choosing_service)

    keyboard = await inline_master_services_by_category(master_id, service_id, add_back_button=True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    master_name = await get_master_name(master_id)
    service_name = await get_service_name(service_id)

    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service_name}\n–ú–∞—Å—Ç–µ—Ä: {master_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–æ–≤
@router.callback_query(F.data.startswith("back_to_masters_"), BookingStates.choosing_service)
async def back_to_masters(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    service_id = state_data.get("service_id")

    if not service_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    await state.set_state(BookingStates.choosing_master)

    keyboard = await inline_masters_by_service(service_id, add_back_button=True)
    service_name = await get_service_name(service_id)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {service_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
@router.callback_query(F.data.startswith("master_service_"), BookingStates.choosing_service)
async def master_service_selected(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[-1])
    await state.update_data(master_service_id=service_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± —É—Å–ª—É–≥–µ
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute('''
            SELECT name, description, price, duration, photo
            FROM master_services
            WHERE id = ?
        ''', (service_id,))
        row = await cursor.fetchone()

    if not row:
        await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    name, description, price, duration, photo = row
    duration_str = format_duration(duration)

    text = (
        f"*{name}*\n\n"
        f"üí¨ {description}\n\n"
        f"üí∞ *–¶–µ–Ω–∞:* {price}‚ÇΩ\n"
        f"‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration_str}"
    )

    await state.set_state(BookingStates.viewing_service)

    await callback.message.delete()

    if photo:
        await callback.message.answer_photo(
            photo=photo,
            caption=text,
            parse_mode="Markdown",
            reply_markup=service_description_kb(service_id)
        )
    else:
        await callback.message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=service_description_kb(service_id)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("back_to_services_list_"), BookingStates.viewing_service)
async def back_to_services_list(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    master_id = state_data["master_id"]
    category_id = state_data["service_id"]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞
    keyboard = await inline_master_services_by_category(master_id, category_id, add_back_button=True)
    master_name = await get_master_name(master_id)
    service_name = await get_service_name(category_id)

    await state.set_state(BookingStates.choosing_service)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service_name}\n–ú–∞—Å—Ç–µ—Ä: {master_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )

    await callback.answer()


@router.callback_query(F.data.startswith("book_"), BookingStates.viewing_service)
async def begin_booking(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    master_id = state_data["master_id"]

    await state.set_state(BookingStates.choosing_date)
    await callback.message.delete()

    calendar_kb = await inline_user_calendar(master_id)

    await callback.message.answer(
        text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=calendar_kb
    )

    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
def get_available_months():
    today = datetime.today().date()
    available_months = [today.month]  # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if today.month < 12:
        available_months.append(today.month + 1)
    else:
        available_months.append(1)  # –ï—Å–ª–∏ –¥–µ–∫–∞–±—Ä—å, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ‚Äî —è–Ω–≤–∞—Ä—å
    return available_months


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
@router.callback_query(F.data.startswith("user_next_month_"), BookingStates.choosing_date)
async def next_month(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    master_id = int(parts[3])
    year = int(parts[4])
    month = int(parts[5])

    available_months = get_available_months()  # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

    if month in available_months:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if month == 12:
            month = 1
            year += 1
        else:
            month += 1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if month not in available_months:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã.")
            return
    else:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar_kb = await inline_user_calendar(master_id, year, month)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ {months_ru[month]} {year}",
        reply_markup=calendar_kb
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(calendar_year=year, calendar_month=month)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
@router.callback_query(F.data.startswith("user_prev_month_"), BookingStates.choosing_date)
async def prev_month(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    master_id = int(parts[3])
    year = int(parts[4])
    month = int(parts[5])

    available_months = get_available_months()  # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

    if month in available_months:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        if month == 1:
            month = 12
            year -= 1
        else:
            month -= 1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        if month not in available_months:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü —Ä–∞–Ω–µ–µ —Ç–µ–∫—É—â–µ–≥–æ.")
            return
    else:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar_kb = await inline_user_calendar(master_id, year, month)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ {months_ru[month]} {year}",
        reply_markup=calendar_kb
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(calendar_year=year, calendar_month=month)
    await callback.answer()


@router.callback_query(F.data.startswith("select_date_"), BookingStates.choosing_date)
async def select_date(callback: CallbackQuery, state: FSMContext):
    selected_date = callback.data.split("_")[-1]
    date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
    formatted_date = date_obj.strftime("%d-%m-%Y")

    await state.update_data(selected_date=selected_date)

    state_data = await state.get_data()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute('''
            SELECT duration FROM master_services WHERE id = ?
        ''', (state_data["master_service_id"],))
        duration = (await cursor.fetchone())[0]

    time_keyboard = await inline_time_selector(
        master_id=state_data["master_id"],
        selected_date=selected_date,
        service_duration=duration
    )

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}\n\n"
        "‚è≥ ‚Äî –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å—å—é\n"
        "‚úñÔ∏è ‚Äî –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –±—É–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é\n"
        "üïí ‚Äî –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_keyboard
    )
    await state.set_state(BookingStates.choosing_time)
    await callback.answer()


@router.callback_query(F.data == "back_to_service_info", BookingStates.choosing_date)
async def back_to_service_info(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    master_id = state_data.get("master_id")  # ID –º–∞—Å—Ç–µ—Ä–∞
    service_id = state_data.get("service_id")  # ID —É—Å–ª—É–≥–∏

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    await callback.message.delete()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞
    keyboard = await inline_master_services_by_category(master_id, service_id, add_back_button=True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    master_name = await get_master_name(master_id)
    service_name = await get_service_name(service_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service_name}\n–ú–∞—Å—Ç–µ—Ä: {master_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    await state.set_state(BookingStates.choosing_service)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await callback.answer()


# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –£—Ç–∏–ª–∏—Ç—ã
async def _create_appointment(user_id: int, master_id: int, service_id: int,
                              date: str, time: str, duration: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        await db.execute(
            """INSERT INTO appointments
               (user_id, master_id, service_id, date, time, duration)
               VALUES (?, ?, ?, ?, ?, ?)""",
            (user_id, master_id, service_id, date, time, duration)
        )
        await db.commit()


async def _finish_booking(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(BookingStates.confirming_booking)
    await callback.message.edit_text(
        f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {data['selected_date']} –≤ {data['selected_time']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!"
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    await callback.answer()


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
@router.callback_query(F.data.startswith("select_time_"), BookingStates.choosing_time)
async def select_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_time = callback.data.split("_")[-1]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(selected_time=selected_time)

    # –¥–æ—Å—Ç–∞—ë–º –∏–∑ state –ø—Ä–µ–∂–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    master_id = data["master_id"]
    service_id = data["master_service_id"]
    selected_date = data["selected_date"]

    # 1) –ø–æ–ª—É—á–∞–µ–º duration –∏–∑ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cur = await db.execute(
            "SELECT duration FROM master_services WHERE id = ?", (service_id,)
        )
        duration = (await cur.fetchone())[0]

    # 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º duration –≤ state (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ)
    await state.update_data(duration=duration)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä
    tg_id = callback.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cur = await db.execute(
            "SELECT id FROM users WHERE telegram_id = ?", (tg_id,)
        )
        row = await cur.fetchone()

    if row:
        # —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å
        user_id = row[0]
        await _create_appointment(user_id, master_id, service_id,
                                  selected_date, selected_time, duration)
        await _finish_booking(callback, state)
    else:
        # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø—Ä–æ—Å–∏–º –∏–º—è
        await state.set_state(BookingStates.asking_name)
        await callback.message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )


@router.callback_query(F.data == "back_to_calendar", BookingStates.choosing_time)
async def back_to_calendar(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—è—Ü–µ –∏ –≥–æ–¥–µ
    month = state_data.get("calendar_month")
    year = state_data.get("calendar_year")

    if not month or not year:
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        today = datetime.today()
        month = today.month
        year = today.year

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if month not in months_ru:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
    calendar_kb = await inline_user_calendar(state_data["master_id"], year, month)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    master_name = await get_master_name(state_data["master_id"])
    service_name = await get_service_name(state_data["service_id"])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(BookingStates.choosing_date)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service_name}\n–ú–∞—Å—Ç–µ—Ä: {master_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ {months_ru[month]} {year}:",
        reply_markup=calendar_kb
    )

    await callback.answer()


@router.callback_query(F.data.startswith("occupied_"), BookingStates.choosing_time)
async def handle_occupied_time(callback: CallbackQuery):
    reason = callback.data.split("_")[1]

    if reason == "forward":
        text = "‚è≥ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º"
    elif reason == "backward":
        text = "‚úñÔ∏è –≠—Ç–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∑–∞–ø–∏—Å—å—é –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
    elif reason == "past":
        text = "üïí –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è"
    else:
        text = "‚õî –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è"

    await callback.answer(text, show_alert=True)


@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", BookingStates.asking_phone)
async def cancel_registration_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)


@router.message(BookingStates.asking_name, F.text)
async def process_registration_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text.strip())
    await state.set_state(BookingStates.asking_phone)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb
    )


@router.message(BookingStates.asking_phone, F.contact)
async def process_registration_phone_contact(message: Message, state: FSMContext):
    # –ø—Ä–∏—à—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç
    phone = message.contact.phone_number
    await _save_user_and_book(message, state, phone)


async def _save_user_and_book(message: Message, state: FSMContext, phone: str):
    data = await state.get_data()
    user_name = data["user_name"]
    master_id = data["master_id"]
    service_id = data["master_service_id"]
    selected_date = data["selected_date"]
    selected_time = data["selected_time"]
    duration = data["duration"]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cur = await db.execute(
            "INSERT INTO users (telegram_id, name, phone) VALUES (?, ?, ?)",
            (message.from_user.id, user_name, phone)
        )
        await db.commit()
        user_id = cur.lastrowid

    await _create_appointment(
        user_id,
        master_id,
        service_id,
        selected_date,
        selected_time,
        duration
    )

    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ ‚úÖ",
        reply_markup=main_kb
    )
    await state.clear()
