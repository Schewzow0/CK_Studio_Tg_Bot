import aiosqlite
import calendar
import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import DB_PATH

from app.database import get_master_schedule, get_master_date_exceptions, get_master_working_hours_for_date

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£—Å–ª—É–≥–∏"), KeyboardButton(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="–°–∫–∏–¥–∫–∏")],
        [KeyboardButton(text="–û –Ω–∞—Å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é..."
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è –∞–¥–º–∏–Ω–∞)
main_admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£—Å–ª—É–≥–∏"), KeyboardButton(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="–ù–∞—à–∏ —Å–∫–∏–¥–∫–∏")],
        [KeyboardButton(text="–û –Ω–∞—Å")],
        [KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é..."
)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
admin_panel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"), KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏")],
        [KeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"), KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)


def get_user_management_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="block_user")
    builder.button(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="unblock_user")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")
    return builder.adjust(2, 1).as_markup()


def get_export_menu_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="export_users")
    builder.button(text="üìÖ –í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="export_appointments")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")
    return builder.adjust(2, 1).as_markup()


def about_inline_kb():
    builder = InlineKeyboardBuilder()

    builder.button(text="üßë‚Äçüé® –û –º–∞—Å—Ç–µ—Ä–∞—Ö", callback_data="about_masters")
    builder.button(text="üè† –û —Å—Ç—É–¥–∏–∏", callback_data="about_studio")
    builder.button(text="üèÜ –û –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö", callback_data="about_achievements")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_main")

    return builder.adjust(1).as_markup()


def get_service_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="add_service")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="delete_service")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="edit_service")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_management")
    return builder.adjust(2).as_markup()


def get_master_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_master")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="delete_master")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="edit_master")
    builder.button(text="üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="configure_schedule")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_management")
    return builder.adjust(2, 2).as_markup()


def inline_schedule_actions(master_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_schedule_{master_id}")
    builder.button(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"view_schedule_{master_id}")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥",                callback_data="cancel_schedule")
    return builder.adjust(2, 1).as_markup()


def back_to_configure_schedule_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="configure_schedule")
    return builder.as_markup()


months_ru = {
    1: "–Ø–Ω–≤–∞—Ä—å",  2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç",     4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",     6: "–ò—é–Ω—å",    7: "–ò—é–ª—å",     8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }


async def inline_edit_calendar(master_id: int, year=None, month=None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    today = datetime.date.today()
    year = year or today.year
    month = month or today.month

    working = await get_master_schedule(master_id)
    exceptions = await get_master_date_exceptions(master_id)

    cal = calendar.Calendar(firstweekday=calendar.MONDAY)
    month_cal = cal.monthdayscalendar(year, month)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏
    builder.row(
        InlineKeyboardButton(text="‚óÄ", callback_data=f"prev_month_{master_id}_{year}_{month}"),
        InlineKeyboardButton(text=f"{months_ru[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(text="‚ñ∂", callback_data=f"next_month_{master_id}_{year}_{month}")
    )

    weekdays_ru = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=wd, callback_data="ignore") for wd in weekdays_ru])

    for week in month_cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text="  ", callback_data="ignore"))
            else:
                iso = f"{year:04d}-{month:02d}-{day:02d}"
                wd = datetime.date(year, month, day).weekday()
                mark = (
                    "‚úÖ" if iso in exceptions and exceptions[iso] == 1
                    else "‚ùå" if iso in exceptions
                    else "‚úÖ" if wd in working else "‚ùå"
                )
                row.append(InlineKeyboardButton(
                    text=f"{day:2d}{mark}",
                    callback_data=f"toggle_{iso}"
                ))
        builder.row(*row)

    builder.row(
        InlineKeyboardButton(text="‚úî –ì–æ—Ç–æ–≤–æ", callback_data="done_edit"),
        InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"schedule_action_{master_id}")
    )

    return builder.as_markup()


def inline_view_schedule_kb(master_id: int, year: int, month: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ", callback_data=f"prev_month_view_{master_id}_{year}_{month}")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"schedule_action_{master_id}")
    builder.button(text="‚ñ∂", callback_data=f"next_month_view_{master_id}_{year}_{month}")
    return builder.adjust(3).as_markup()


def get_master_edit_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–º—è", callback_data="edit_name")
    builder.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_about")
    builder.button(text="‚úèÔ∏è –ò–Ω—Ç–µ—Ä–≤—å—é", callback_data="edit_interview")
    builder.button(text="üì∑ –§–æ—Ç–æ", callback_data="edit_photo")
    builder.button(text="üíÖ –£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="edit_services")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_master_action")
    return builder.adjust(2, 2, 1, 1).as_markup()


def get_edit_master_services_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="add_service_to_master")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="remove_service_from_master")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_master_edit")
    return builder.adjust(2).as_markup()


def get_cancel_master_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_master_action")
    return builder.as_markup()


# –£—Å–ª—É–≥–∏
async def inline_services(add_back_button: bool = False):
    keyboard = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        async with db.execute("SELECT id, name FROM services") as cursor:
            rows = await cursor.fetchall()

    for service_id, name in rows:
        keyboard.button(text=name, callback_data=f"service_{service_id}")

    if add_back_button or not rows:
        keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="cancel_action_service")

    return keyboard.adjust(2).as_markup()


# –ú–∞—Å—Ç–µ—Ä–∞
async def inline_masters(add_back_button: bool = False) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        async with db.execute("SELECT id, name FROM masters") as cursor:
            rows = await cursor.fetchall()

    for master_id, name in rows:
        keyboard.button(text=name, callback_data=f"master_{master_id}")

    if add_back_button or not rows:
        keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="cancel_action_master")

    return keyboard.adjust(2).as_markup()


async def inline_masters_for_users(add_back_button: bool = False) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        async with db.execute("SELECT id, name FROM masters") as cursor:
            rows = await cursor.fetchall()

    for master_id, name in rows:
        keyboard.button(text=name, callback_data=f"master_for_users_{master_id}")

    if add_back_button or not rows:
        keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="cancel_action_master_users")

    return keyboard.adjust(2).as_markup()


# –£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
async def inline_master_services(master_id: int, add_back_button: bool = False):
    builder = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        async with db.execute('''
            SELECT ms.id, ms.name, s.name 
            FROM master_services ms
            JOIN services s ON ms.service_id = s.id
            WHERE ms.master_id = ?
            ORDER BY s.name, ms.name
        ''', (master_id,)) as cursor:
            rows = await cursor.fetchall()

    for service_id, service_name, category_name in rows:
        builder.button(
            text=f"{service_name} ({category_name})",
            callback_data=f"master_service_{service_id}"
        )

    if add_back_button:
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="cancel_action_master")

    return builder.adjust(1).as_markup()


def format_duration(minutes: int) -> str:
    hours = minutes // 60
    minutes = minutes % 60
    parts = []
    if hours:
        parts.append(f"{hours} —á–∞—Å{'–∞' if 1 < hours < 5 else '' if hours == 1 else '–æ–≤'}")
    if minutes:
        parts.append(f"{minutes} –º–∏–Ω—É—Ç{'—ã' if 1 < minutes < 5 else '–∞' if minutes == 1 else ''}")
    return ' '.join(parts) if parts else '0 –º–∏–Ω—É—Ç'


# –î–æ–±–∞–≤–∏–º –≤ keyboards.py –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

async def inline_masters_by_service(service_id: int, add_back_button: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥"""
    builder = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π
        async with db.execute('''
            SELECT m.id, m.name 
            FROM masters m
            JOIN services_masters sm ON m.id = sm.master_id
            WHERE sm.service_id = ?
            ORDER BY m.name
        ''', (service_id,)) as cursor:
            rows = await cursor.fetchall()

    for master_id, name in rows:
        builder.button(text=name, callback_data=f"master_{master_id}")

    if add_back_button or not rows:
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_services")

    return builder.adjust(2).as_markup()


async def inline_master_services_by_category(master_id: int, service_id: int, add_back_button: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        async with db.execute('''
            SELECT id, name, price, duration 
            FROM master_services 
            WHERE master_id = ? AND service_id = ?
            ORDER BY name
        ''', (master_id, service_id)) as cursor:
            rows = await cursor.fetchall()

    for service_id, name, price, duration in rows:
        duration_str = format_duration(duration)
        builder.button(
            text=f"{name} - {price}‚ÇΩ ({duration_str})",
            callback_data=f"master_service_{service_id}"
        )

    if add_back_button:
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"back_to_masters_{service_id}")

    return builder.adjust(1).as_markup()


async def master_info_kb(master_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="about_masters")
    builder.button(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data=f"read_interview_{master_id}")
    return builder.adjust(2).as_markup()


async def read_interview_kb(master_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –ú–µ–Ω—è–µ–º callback_data –Ω–∞ —Ç–æ—Ç –∂–µ –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ –≤ show_master_info_for_users
    builder.button(
        text="‚óÄ –ù–∞–∑–∞–¥",
        callback_data=f"master_for_users_{master_id}"
    )
    return builder.as_markup()


def service_description_kb(service_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"back_to_services_list_{service_id}")
    builder.button(text="üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_{service_id}")
    return builder.adjust(2).as_markup()


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def inline_user_calendar(master_id: int, year=None, month=None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    today = datetime.date.today()
    year = year or today.year
    month = month or today.month

    working_days = await get_master_schedule(master_id)
    day_exceptions = await get_master_date_exceptions(master_id)

    cal = calendar.Calendar(firstweekday=calendar.MONDAY)
    month_cal = cal.monthdayscalendar(year, month)

    builder.row(
        InlineKeyboardButton(text="‚óÄ", callback_data=f"user_prev_month_{master_id}_{year}_{month}"),
        InlineKeyboardButton(text=f"{months_ru[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(text="‚ñ∂", callback_data=f"user_next_month_{master_id}_{year}_{month}")
    )

    weekdays_ru = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=d, callback_data="ignore") for d in weekdays_ru])

    for week in month_cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
                continue

            iso_date = f"{year:04d}-{month:02d}-{day:02d}"
            weekday = datetime.date(year, month, day).weekday()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–Ω–∏, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É
            if datetime.date(year, month, day) < today:
                # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å ‚ùå
                row.append(InlineKeyboardButton(text=f"{day:2d} ‚ùå", callback_data="ignore"))
                continue

            is_available = (
                (iso_date in day_exceptions and day_exceptions[iso_date] == 1) or
                (iso_date not in day_exceptions and weekday in working_days)
            )

            mark = "‚úÖ" if is_available else "‚ùå"
            cb = f"select_date_{iso_date}" if is_available else "ignore"
            row.append(InlineKeyboardButton(text=f"{day:2d}{mark}", callback_data=cb))
        builder.row(*row)

    builder.row(InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_service_info"))

    return builder.as_markup()


# –í keyboards.py –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é inline_time_selector
async def inline_time_selector(master_id: int, selected_date: str, service_duration: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute('''
            SELECT time, duration 
            FROM appointments 
            WHERE master_id = ? AND date = ?
        ''', (master_id, selected_date))
        appointments = await cursor.fetchall()

    working_hours = await get_master_working_hours_for_date()

    busy_intervals = []
    for time_str, duration in appointments:
        start = datetime.datetime.strptime(time_str, "%H:%M")
        end = start + datetime.timedelta(minutes=duration)
        busy_intervals.append((start, end))

    now = datetime.datetime.now().time()
    is_today = selected_date == datetime.datetime.now().date().isoformat()
    available_times = []
    blocked_forward = set()
    blocked_backward = set()
    past_times = set()

    for time in working_hours:
        new_start = datetime.datetime.strptime(time, "%H:%M")
        new_end = new_start + datetime.timedelta(minutes=service_duration)

        if is_today and new_start.time() < now:
            past_times.add(time)
            continue

        for busy_start, busy_end in busy_intervals:
            if busy_start <= new_start < busy_end:
                blocked_forward.add(time)
                break
            if busy_start < new_end <= busy_end:
                blocked_backward.add(time)
                break
            if new_start < busy_start and new_end > busy_end:
                blocked_forward.add(time)
                break
        else:
            available_times.append(time)

    for time in working_hours:
        if time in available_times:
            builder.button(text=time, callback_data=f"select_time_{time}")
        elif time in past_times:
            builder.button(text=f"üïí {time}", callback_data=f"occupied_past_{time}")
        elif time in blocked_forward:
            builder.button(text=f"‚è≥ {time}", callback_data=f"occupied_forward_{time}")
        elif time in blocked_backward:
            builder.button(text=f"‚úñÔ∏è {time}", callback_data=f"occupied_backward_{time}")

    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_calendar")
    return builder.adjust(5).as_markup()
