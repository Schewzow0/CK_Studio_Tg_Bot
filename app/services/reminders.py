import asyncio
from datetime import datetime, timedelta, timezone
import aiosqlite
from aiogram import Bot
from app.config import DB_PATH

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ (UTC+2)
TZ = timezone(timedelta(hours=2))


async def ensure_reminder_column():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É appointments –∫–æ–ª–æ–Ω–∫—É reminder_sent, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("PRAGMA foreign_keys = ON")
        cursor = await db.execute("PRAGMA table_info(appointments)")
        cols = [row[1] for row in await cursor.fetchall()]
        if "reminder_sent" not in cols:
            await db.execute(
                "ALTER TABLE appointments ADD COLUMN reminder_sent INTEGER DEFAULT 0"
            )
            await db.commit()


async def reminder_loop(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    –ø–æ –∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+2) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
    """
    await ensure_reminder_column()
    while True:
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ (UTC+2), –±–µ–∑ —Å–µ–∫—É–Ω–¥ –∏ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        now = datetime.now(TZ).replace(second=0, microsecond=0)
        # –í—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        target = now + timedelta(days=1)
        date_str = target.strftime("%Y-%m-%d")
        time_str = target.strftime("%H:%M")

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("PRAGMA foreign_keys = ON")
            cursor = await db.execute(
                """
                SELECT a.id, u.telegram_id, a.date, a.time, m.name, ms.name
                FROM appointments a
                JOIN users u ON a.user_id = u.id
                JOIN masters m ON a.master_id = m.id
                JOIN master_services ms ON a.service_id = ms.id
                WHERE a.date = ? AND a.time = ? AND (a.reminder_sent IS NULL OR a.reminder_sent = 0)
                """,
                (date_str, time_str)
            )
            rows = await cursor.fetchall()
            for appointment_id, tg_id, apt_date, apt_time, master_name, service_name in rows:
                text = (
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {apt_date} –≤ {apt_time}.\n"
                    f"–£—Å–ª—É–≥–∞: {service_name}\n"
                    f"–ú–∞—Å—Ç–µ—Ä: {master_name}"
                )
                try:
                    await bot.send_message(chat_id=tg_id, text=text)
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
                else:
                    await db.execute(
                        "UPDATE appointments SET reminder_sent = 1 WHERE id = ?",
                        (appointment_id,)
                    )
            await db.commit()

        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)
